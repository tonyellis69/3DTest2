#line 2
const int realmSize = 4;
const float mazeSize =  3;//0.03125;// 0.0625;// 0.25;//3;
const int mazeSteps = 9;

float maze[81] = float[](	0.0,0.0,0.0,0.0,0.0,0.0,0.0,1,0.0,
							0.0,1,0.0,1,1,1,0.0,1,0.0,
							0.0,1,0.0,0.0,0.0,1,0.0,1,0.0,
							0.0,1,1,1,1,1,1,1,0.0,
							0.0,1,0.0,1,0.0,0.0,0.0,0.0,0.0,
							0.0,1,0.0,1,0.0,1,1,1,1,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,1,0.0,1,1,1,0.0,1,1,
							0.0,1,0.0,0.0,0.0,1,0.0,0.0,0.0);
							
						
/*					
float maze[81] = float[](	0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,1.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,
							0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0);							
							
						
		*/			
							
const float cellSize = mazeSize / mazeSteps;


vec2 random2( vec2 p ) {
    return fract(sin(vec2(dot(p,vec2(127.1,311.7)),dot(p,vec2(269.5,183.3))))*43758.5453);
}

vec3 hash3( vec2 p ){
    vec3 q = vec3( dot(p,vec2(127.1,311.7)), 
				   dot(p,vec2(269.5,183.3)), 
				   dot(p,vec2(419.2,371.9)) );
	return fract(sin(q)*43758.5453);
}



// Modulo 289 without a division (only multiplications)
vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec4 mod289(vec4 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

// Modulo 7 without a division
vec3 mod7(vec3 x) {
  return x - floor(x * (1.0 / 7.0)) * 7.0;
}

// Permutation polynomial: (34x^2 + x) mod 289
vec3 permute(vec3 x) {
  return mod289((34.0 * x + 1.0) * x);
}

vec4 permute4(vec4 x) {
     return mod289(((x*34.0)+1.0)*x);
}



// Cellular noise, returning F1 and F2 in a vec2.
// Standard 3x3 search window for good F1 and F2 values
vec2 cellular(vec2 P) {
#define K 0.142857142857 // 1/7
#define Ko 0.428571428571 // 3/7
#define jitter 1.0 // Less gives more regular pattern
	vec2 Pi = mod289(floor(P));
 	vec2 Pf = fract(P);
	vec3 oi = vec3(-1.0, 0.0, 1.0);
	vec3 of = vec3(-0.5, 0.5, 1.5);
	vec3 px = permute(Pi.x + oi);
	vec3 p = permute(px.x + Pi.y + oi); // p11, p12, p13
	vec3 ox = fract(p*K) - Ko;
	vec3 oy = mod7(floor(p*K))*K - Ko;
	vec3 dx = Pf.x + 0.5 + jitter*ox;
	vec3 dy = Pf.y - of + jitter*oy;
	vec3 d1 = dx * dx + dy * dy; // d11, d12 and d13, squared
	p = permute(px.y + Pi.y + oi); // p21, p22, p23
	ox = fract(p*K) - Ko;
	oy = mod7(floor(p*K))*K - Ko;
	dx = Pf.x - 0.5 + jitter*ox;
	dy = Pf.y - of + jitter*oy;
	vec3 d2 = dx * dx + dy * dy; // d21, d22 and d23, squared
	p = permute(px.z + Pi.y + oi); // p31, p32, p33
	ox = fract(p*K) - Ko;
	oy = mod7(floor(p*K))*K - Ko;
	dx = Pf.x - 1.5 + jitter*ox;
	dy = Pf.y - of + jitter*oy;
	vec3 d3 = dx * dx + dy * dy; // d31, d32 and d33, squared
	// Sort out the two smallest distances (F1, F2)
	vec3 d1a = min(d1, d2);
	d2 = max(d1, d2); // Swap to keep candidates for F2
	d2 = min(d2, d3); // neither F1 nor F2 are now in d3
	d1 = min(d1a, d2); // F1 is now in d1
	d2 = max(d1a, d2); // Swap to keep candidates for F2
	d1.xy = (d1.x < d1.y) ? d1.xy : d1.yx; // Swap if smaller
	d1.xz = (d1.x < d1.z) ? d1.xz : d1.zx; // F1 is in d1.x
	d1.yz = min(d1.yz, d2.yz); // F2 is now not in d2.yz
	d1.y = min(d1.y, d1.z); // nor in  d1.z
	d1.y = min(d1.y, d2.x); // F2 is in d1.y, we're done.
	return sqrt(d1.xy);
}










vec4 taylorInvSqrt(vec4 r)
{
  return 1.79284291400159 - 0.85373472095314 * r;
}

float snoise(vec3 v)
  { 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //   x0 = x0 - 0.0 + 0.0 * C.xxx;
  //   x1 = x0 - i1  + 1.0 * C.xxx;
  //   x2 = x0 - i2  + 2.0 * C.xxx;
  //   x3 = x0 - 1.0 + 3.0 * C.xxx;
  vec3 x1 = x0 - i1 + C.xxx;
  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

// Permutations
  i = mod289(i); 
  vec4 p = permute4( permute4( permute4( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients: 7x7 points over a square, mapped onto an octahedron.
// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
  float n_ = 0.142857142857; // 1.0/7.0
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
  }


float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}


vec3 fade(vec3 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

// Classic Perlin noise
float cnoise(vec3 P)
{
  vec3 Pi0 = floor(P); // Integer part for indexing
  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1
  Pi0 = mod289(Pi0);
  Pi1 = mod289(Pi1);
  vec3 Pf0 = fract(P); // Fractional part for interpolation
  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0
  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
  vec4 iy = vec4(Pi0.yy, Pi1.yy);
  vec4 iz0 = Pi0.zzzz;
  vec4 iz1 = Pi1.zzzz;

  
  vec4 ixy = permute4(permute4(ix) + iy);
  vec4 ixy0 = permute4(ixy + iz0);
  vec4 ixy1 = permute4(ixy + iz1);

  vec4 gx0 = ixy0 * (1.0 / 7.0);
  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
  gx0 = fract(gx0);
  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
  vec4 sz0 = step(gz0, vec4(0.0));
  gx0 -= sz0 * (step(0.0, gx0) - 0.5);
  gy0 -= sz0 * (step(0.0, gy0) - 0.5);

  vec4 gx1 = ixy1 * (1.0 / 7.0);
  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
  gx1 = fract(gx1);
  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
  vec4 sz1 = step(gz1, vec4(0.0));
  gx1 -= sz1 * (step(0.0, gx1) - 0.5);
  gy1 -= sz1 * (step(0.0, gy1) - 0.5);

  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);

  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));
  g000 *= norm0.x;
  g010 *= norm0.y;
  g100 *= norm0.z;
  g110 *= norm0.w;
  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));
  g001 *= norm1.x;
  g011 *= norm1.y;
  g101 *= norm1.z;
  g111 *= norm1.w;

  float n000 = dot(g000, Pf0);
  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
  float n111 = dot(g111, Pf1);

  vec3 fade_xyz = fade(Pf0);
  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
  return 2.2 * n_xyz;
  
 // return 0;
}

vec2 fade2(vec2 t) {
  return t*t*t*(t*(t*6.0-15.0)+10.0);
}

float cnoise2(vec2 P)
{
  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);
  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);
  Pi = mod289(Pi); // To avoid truncation effects in permutation
  vec4 ix = Pi.xzxz;
  vec4 iy = Pi.yyww;
  vec4 fx = Pf.xzxz;
  vec4 fy = Pf.yyww;

  vec4 i = permute4(permute4(ix) + iy);

  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;
  vec4 gy = abs(gx) - 0.5 ;
  vec4 tx = floor(gx + 0.5);
  gx = gx - tx;

  vec2 g00 = vec2(gx.x,gy.x);
  vec2 g10 = vec2(gx.y,gy.y);
  vec2 g01 = vec2(gx.z,gy.z);
  vec2 g11 = vec2(gx.w,gy.w);

  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));
  g00 *= norm.x;  
  g01 *= norm.y;  
  g10 *= norm.z;  
  g11 *= norm.w;  

  float n00 = dot(g00, vec2(fx.x, fy.x));
  float n10 = dot(g10, vec2(fx.y, fy.y));
  float n01 = dot(g01, vec2(fx.z, fy.z));
  float n11 = dot(g11, vec2(fx.w, fy.w));

  vec2 fade_xy = fade2(Pf.xy);
  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);
  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);
  return 2.3 * n_xy;
}



float fbm2D( int octaves, vec2 xy) {
	float frequency = 1;
	float lacunarity = 2;
	float amplitude = 1;
	float persistence = 0.5;
	float total = 0;
    for( int i=0; i < octaves; i++ ) {
        total += snoise(xy * frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }
    return total;
}

float fbm3D( int octaves, vec3 xyz) {
	float frequency = 1;
	float lacunarity = 2;
	float amplitude = 1;
	float persistence = 0.5;
	float total = 0;
    for( int i=0; i < octaves; i++ ) {
        total += snoise(xyz.xy * frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }
    return total;
}

float fbm3Dclassic( int octaves, vec3 xyz) {
	float frequency = 1;
	float lacunarity = 2;
	float amplitude = 1;
	float persistence = 0.5;
	float total = 0;
    for( int i=0; i < octaves; i++ ) {
        total += cnoise(xyz* frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }
    return total;
}


float fbm2Dclassic( int octaves, vec2 xy) {
	float frequency = 1;
	float lacunarity = 2;
	float amplitude = 1;
	float persistence = 0.5;
	float total = 0;
    for( int i=0; i < octaves; i++ ) {
        total += cnoise2(xy* frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }
    return total;
}

float fbm2DclassicFreq( int octaves, vec2 xy, float frequency) {
	float lacunarity = 2.0;
	float amplitude = 1;
	float persistence =  0.5;
	float total = 0;
    for( int i=0; i < octaves; i++ ) {
        total += cnoise2(xy* frequency) * amplitude;
        frequency *= lacunarity;
        amplitude *= persistence;
    }
    return total;
}



float turbulence( int octaves,   vec2 xy) {
	float frequency = 1;
	float lacunarity = 2;
	float amplitude = 1;
	float persistence = 0.5;
	float total = 0;
	for (int i = 0; i < octaves; i++) {
		total += amplitude * abs(snoise(xy * frequency));
		frequency *= lacunarity;
		amplitude *= persistence;
	}
	return total;
}

float ridge ( float h, float offset) {
	h = abs(h);     // create creases
    h = offset - h; // invert so (tips of) creases are at top
    h = h * h;      // sharpen creases
	return h;
}



float ridgedMF(int octaves, vec2 xy)
{
	float gain = 2.0;
	float offset = 1;
	float lacunarity = 2.0;
    float value = 0.0;
    float freq = 1.0;
	float weight = 1.0;
    for(int i=0; i<octaves; i++) {
		//float signal = ridge(cnoise(vec3(xy,0)*freq ), offset);  //does not work
        float signal = ridge(cnoise2(xy*freq * 2), offset);  //works
		//float signal = ridge(snoise(vec3(xy,0)*freq * 2), offset); //works
		//float signal = ridge(snoise(xy*freq * 2), offset); //does not work
		signal *= weight; 
		weight = signal * gain;
		weight = clamp(weight,0.0,1.0);
		
		value += signal * pow(freq, -1.0); // 1.0, 0.5, 0.25...
		freq *= lacunarity; //1,2,4,8...
		
    }
    return  (value * 1.25) - 1.0; 
}


float billow2D(int octaves, vec2 xy, float frequency, float persistence) {
	float amplitude = 1.0;
	float lacunarity = 2.0;
	float value = 0.0;
   // Get the coherent-noise value from the input value and add it to the final result.
	for (int i=0; i < octaves; i++) {
		float signal = cnoise2(xy*frequency);
		signal = 2.0 * abs(signal) - 1.0;
		value += signal * amplitude;
		frequency *= lacunarity;
		amplitude *= persistence;
	}
	return value + 0.5;
}


vec3 myVoronoi (vec2 pos2) {

	vec3 pos = vec3(pos2,0);
	
  int xInt = (pos.x > 0.0? int(pos.x): int(pos.x - 1.0));
  int yInt = (pos.y > 0.0? int(pos.y): int(pos.y - 1.0));
   int zInt = (pos.z > 0.0? int(pos.z): int(pos.z- 1.0));

  vec3 candidate;
  float minDist = 9999999.0;
	for (int zCur = zInt - 2; zCur <= zInt + 2; zCur++) {
	for (int yCur = yInt - 2; yCur <= yInt + 2; yCur++) {
		for (int xCur = xInt - 2; xCur <= xInt + 2; xCur++) {
			vec3 seedPos = vec3(xCur,yCur,zCur) + hash3(vec2(xCur,yCur));

			float dist =   distance(seedPos, pos);
			 if (dist < minDist) {
				// This seed point is closer to any others found so far, so record it.
				minDist = dist;
				candidate = seedPos;
			}
		}
	}
	}
	
	
	vec3 result;
	result.x = minDist ;
	result.y =  random2(floor(candidate.xy)).x;
	//result.z = something else
	
	return result;
		

}




float distantMountains(int octaves,   vec2 xy ) {
	//round down to the nearest epiecentre
	vec2 epiCentre = (floor(xy / realmSize) * realmSize) + realmSize/2;
	float distance = distance(xy , epiCentre) ;
	distance /= 2;
	float squash;

	squash = smoothstep(0.3,0.9,distance);
	
	float noise = fbm2D(octaves ,   xy);

	noise *= squash;
	
	noise = abs(noise);
	
	//noise = squash;
	return noise;
}


float grandCanyon (int octaves,   vec2 xy ) {
	//round down to the nearest epiecentre
	vec2 epiCentre = (floor(xy / realmSize) * realmSize) + realmSize/2;
	float distance = distance(xy , epiCentre) ;
	distance /= 2;
	float squash;

	squash = smoothstep(0.3,0.9,distance);
	
	float noise = fbm2D(octaves,   xy);
	noise *= squash;
	noise = abs(noise);
	noise = min(0.5,noise);
	
	

	return noise;
}



float blobbyMask(int octaves, vec2 xy) {
	//octave 1 or 2
	float noise = fbm2D(octaves, xy);
	noise = smoothstep(0.4,0.5,noise);
	return noise;
}

float terrace(float noise, int steps) {
	return round(noise * steps) / steps;
}

float getMazeValue(vec2 positionInMaze) {

	ivec2 mazeCell = ivec2(positionInMaze / cellSize);
	if (mazeCell.x < 0 || mazeCell.y < 0)
		return 0;
	if (mazeCell.x > 8 || mazeCell.y > 8)
		return 0;
	
	
	
	int cell = (mazeCell.y * mazeSteps) + mazeCell.x;
	if (cell > 80)
		return 0;
	return maze[cell];
}

float       interpolate(float a, float b, float x)
{
  float     pi_mod;
  float     f_unk;

  pi_mod = x * 3.1415927;
  f_unk = (1 - cos(pi_mod)) * 0.5;
  return (a * (1 - f_unk) + b * x);
}



float terrainValue (  int octaves,   vec3 xyz ) {
	vec2 xy = xyz.xz;
	
	vec2 epiCentre = (floor(xy / realmSize) * realmSize) + realmSize/2.0;
	vec2 nwMazeCorner = epiCentre - vec2(mazeSize/2.0);
	vec2 positionInMaze;
	positionInMaze =  xy - nwMazeCorner;

	
	//find 4 nearest cell centres
	float halfCell = cellSize/2.0;
	vec2 nearestNWcentre =  floor(  (positionInMaze + vec2(halfCell)) / cellSize ) * cellSize;
	
	nearestNWcentre -= vec2(halfCell);
	
	vec2 A = nearestNWcentre;
	vec2 B = nearestNWcentre + vec2(cellSize,0);
	vec2 C = nearestNWcentre + vec2(0,cellSize);
	vec2 D = nearestNWcentre + vec2(cellSize,cellSize);
	
	vec2 displacement = (positionInMaze - A) / cellSize ;
	



	float AB = interpolate(getMazeValue(A),getMazeValue(B),displacement.x);  //0 = none of second part
	float CD = interpolate(getMazeValue(C),getMazeValue(D),displacement.x);
	
	float height = interpolate(AB,CD,displacement.y) ;
	
	height *= getMazeValue(positionInMaze);
	
	height *= 0.1f * mazeSize;
	

	
	float value = xyz.y - height; //clip 2D height value against 3D position
	
	
	//float noise = fbm3D(5,xyz ) * 0.15;
	//value += noise;
	

	return value;
}


