vec3 mod289(vec3 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289(vec2 x) {
  return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) {
  return mod289(((x*34.0)+1.0)*x);
}

float snoise(vec2 v)
  {
  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
                     -0.577350269189626,  // -1.0 + 2.0 * C.x
                      0.024390243902439); // 1.0 / 41.0
// First corner
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
  vec2 i1;
  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
  //i1.y = 1.0 - i1.x;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  // x0 = x0 - 0.0 + 0.0 * C.xx ;
  // x1 = x0 - i1 + 1.0 * C.xx ;
  // x2 = x0 - 1.0 + 2.0 * C.xx ;
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;

// Permutations
  i = mod289(i); // Avoid truncation effects in permutation
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)

  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;

// Normalise gradients implicitly by scaling m
// Approximation of: m *= inversesqrt( a0*a0 + h*h );
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );

// Compute final noise value at P
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}


float octave_noise_2d(  int octaves,  float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy ) {
    float frequency = startingFrequency;
    float amplitude = startingAmplitude;
	float lacunarity = 2;

	float total = 0;;
    for( int i=0; i < octaves; i++ ) {
        total += snoise(xy * frequency) * amplitude;

        frequency *= lacunarity;
        amplitude *= persistence;
    }

    return total;
}

float upsAndDowns( int octaves,  float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy) {
	//startingFrequency = 5; startingAmplitude = 0.1; //work OK
	float noise = octave_noise_2d(octaves,   persistence,   startingFrequency,  startingAmplitude,   xy);
	noise *= 0.15f;
	return noise;
}

float turbulence( int octaves, float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy) {
	float amplitude = startingAmplitude;
	float value = 0;
	
	for (int i = 0; i < octaves; i++) {
		value += amplitude * abs(snoise(xy));
		xy *= 2.;
		amplitude *= .5;
	}
	
	return value;
}

float ridge ( float h, float offset) {
	h = abs(h);     // create creases
    h = offset - h; // invert so creases are at top
    h = h * h;      // sharpen creases
	return h;
}

float ridgedMF ( int octaves, float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy) {
    float lacunarity = 2.0;
    float offset = 0.9;
        
    float sum = 0.0;
    float freq = startingFrequency, amp = startingAmplitude;
    float prev = 1.0;
    for(int i=0; i < octaves; i++) {
        float n = ridge(snoise(xy*freq), offset);
        sum += n*amp;
        sum += n*amp*prev;  // scale by previous octave
        prev = n;
        freq *= lacunarity;
        amp *= persistence;
    }
    return sum;
}

float distantMountains(int octaves,  float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy ) {
	float distance = length(xy) ;
	float squash = pow(distance,3);
	squash = clamp(0.5,0.05,squash);
	
	float noise = octave_noise_2d(octaves,   persistence ,   startingFrequency ,  startingAmplitude * squash,   xy);
	noise = abs(noise);
	

	//noise = squash;
	return noise;
}

float hillocksAndRidges(int octaves, vec2 xy) {
	float noise = upsAndDowns(4,   0.50,   17,  2,   xy);
	noise = max(0.00,noise);
	return noise;
}

/*
float terrainHeight (  int octaves,  float persistence,  float startingFrequency, float startingAmplitude,  vec2 xy ) {
	float baseNoise = 0; float noise = 0;

	baseNoise = distantMountains(5,   persistence ,   1 ,  0.45 ,   xy);
	//baseNoise = distantMountains(1,   persistence ,   1 ,  0.45 ,   xy);

	
	//float hills  = hillocksAndRidges(4,  xy);
	//hills *= 0.03;
	
	//noise = upsAndDowns(4,   0.50,   17,  0.2,   xy);
	//noise = min(0.0,noise);
	//noise *= 0.3;
	
	//return 0.37;;
	return  noise + baseNoise ;
} */


//new
float terrainHeight (  int octaves,  float persistence,  float startingFrequency, float startingAmplitude,  vec3 xyz ) {
	float baseNoise = 0; float noise = 0;
	vec2 xy = vec2(xyz.xz);
	
	//baseNoise = distantMountains(5,   persistence ,   1 ,  0.45 ,   xy);
	baseNoise = upsAndDowns(3,   0.50,   0.5,  1,   xy);
	//float mask = blobbyMask(1,xy);
	
	//float noise3D = octave_noise_3d(octaves, persistence, startingFrequency, startingAmplitude, xyz);

	//noise3D = min(0.1,noise3D);
	
	
//	baseNoise += noise3D ;
	
//	return 0.3;
	
	return  noise + baseNoise ;
}

